/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

export class CardLevelsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Sets the card level for the given user and card
     * @param cardLevelUpdateDto (optional) The card level update
     * @return Success
     */
    setCardLevel(cardLevelUpdateDto: CardLevelUpdateRequestDto | null | undefined): Promise<CardLevelResponseDto> {
        let url_ = this.baseUrl + "/card-levels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(cardLevelUpdateDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSetCardLevel(_response);
        });
    }

    protected processSetCardLevel(response: AxiosResponse): Promise<CardLevelResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CardLevelResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardLevelResponseDto>(<any>null);
    }
}

export class CardsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Gets all the cards
     * @return Success
     */
    getAll(): Promise<CardResponseDto[]> {
        let url_ = this.baseUrl + "/cards";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<CardResponseDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CardResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardResponseDto[]>(<any>null);
    }
}

export class CoreDataClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Gets all card types (Spell, Spawn, Character)
     * @return Success
     */
    getCardTypes(): Promise<CardTypeResponseDto[]> {
        let url_ = this.baseUrl + "/core-data/card-types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCardTypes(_response);
        });
    }

    protected processGetCardTypes(response: AxiosResponse): Promise<CardTypeResponseDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CardTypeResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardTypeResponseDto[]>(<any>null);
    }

    /**
     * Gets all character types (Assassin, Melee...)
     * @return Success
     */
    getCharacterTypes(): Promise<CharacterTypeResponseDto[]> {
        let url_ = this.baseUrl + "/core-data/character-types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCharacterTypes(_response);
        });
    }

    protected processGetCharacterTypes(response: AxiosResponse): Promise<CharacterTypeResponseDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CharacterTypeResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CharacterTypeResponseDto[]>(<any>null);
    }

    /**
     * Gets all rarities (Common, Rare...)
     * @return Success
     */
    getRarities(): Promise<RarityResponseDto[]> {
        let url_ = this.baseUrl + "/core-data/rarities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetRarities(_response);
        });
    }

    protected processGetRarities(response: AxiosResponse): Promise<RarityResponseDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RarityResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RarityResponseDto[]>(<any>null);
    }

    /**
     * Gets all themes (Sci-fy, Fantasy...)
     * @return Success
     */
    getThemes(): Promise<ThemeResponseDto[]> {
        let url_ = this.baseUrl + "/core-data/themes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetThemes(_response);
        });
    }

    protected processGetThemes(response: AxiosResponse): Promise<ThemeResponseDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ThemeResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ThemeResponseDto[]>(<any>null);
    }
}

export class TeamMembershipRequestsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Requests membership in a team for a user
     * @param membershipRequest (optional) The membership request for a user to join a team
     * @return Success
     */
    requestMembership(membershipRequest: TeamMembershipRequestDto | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/team-membership-requests";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(membershipRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRequestMembership(_response);
        });
    }

    protected processRequestMembership(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Accepts the membership request
     * @param id The membership request identifier
     * @return Success
     */
    acceptMembershipRequest(id: string): Promise<void> {
        let url_ = this.baseUrl + "/team-membership-requests/{id}/accept";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAcceptMembershipRequest(_response);
        });
    }

    protected processAcceptMembershipRequest(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Rejects the membership request
     * @param id The membership request identifier
     * @return Success
     */
    rejectMembershipRequest(id: string): Promise<void> {
        let url_ = this.baseUrl + "/team-membership-requests/{id}/reject";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRejectMembershipRequest(_response);
        });
    }

    protected processRejectMembershipRequest(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class TeamsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Updates the team
     * @param teamUpdateRequestDto (optional) The team update request
     * @return Success
     */
    update(teamUpdateRequestDto: TeamUpdateRequestDto | null | undefined): Promise<TeamResponseDto> {
        let url_ = this.baseUrl + "/teams";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(teamUpdateRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<TeamResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TeamResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponseDto>(<any>null);
    }

    /**
     * Creates a new team
     * @param teamCreateRequestDto (optional) The team creation request
     * @return Success
     */
    create(teamCreateRequestDto: TeamCreateRequestDto | null | undefined): Promise<TeamResponseDto> {
        let url_ = this.baseUrl + "/teams";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(teamCreateRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<TeamResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TeamResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponseDto>(<any>null);
    }

    /**
     * Gets the team
     * @param id The team identifier
     * @return Success
     */
    getById(id: string): Promise<TeamResponseDto> {
        let url_ = this.baseUrl + "/teams/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<TeamResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TeamResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponseDto>(<any>null);
    }

    /**
     * Deletes the team
     * @param id The team identifier
     * @return Success
     */
    delete(id: string): Promise<void> {
        let url_ = this.baseUrl + "/teams/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Gets the team users
     * @param id The team identifier
     * @return Success
     */
    getUsers(id: string): Promise<UserResponseDto[]> {
        let url_ = this.baseUrl + "/teams/{id}/users";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: AxiosResponse): Promise<UserResponseDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserResponseDto.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserResponseDto[]>(<any>null);
    }

    /**
     * Gets the membership requests.
     * @param id The team identifier
     * @return Success
     */
    getMembershipRequests(id: string): Promise<TeamMembershipRequestResponseDto[]> {
        let url_ = this.baseUrl + "/teams/{id}/membership-requests";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetMembershipRequests(_response);
        });
    }

    protected processGetMembershipRequests(response: AxiosResponse): Promise<TeamMembershipRequestResponseDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TeamMembershipRequestResponseDto.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamMembershipRequestResponseDto[]>(<any>null);
    }
}

export class UsersClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Updates the user
     * @param userRequestDto (optional) The user update request
     * @return Success
     */
    update2(userRequestDto: UserUpdateRequestDto | null | undefined): Promise<UserResponseDto> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdate2(_response);
        });
    }

    protected processUpdate2(response: AxiosResponse): Promise<UserResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserResponseDto>(<any>null);
    }

    /**
     * Creates a new user
     * @param userCreateRequestDto (optional) The user creation request
     * @return Success
     */
    register(userCreateRequestDto: UserCreateRequestDto | null | undefined): Promise<UserResponseDto> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userCreateRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<UserResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserResponseDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserResponseDto>(<any>null);
    }

    /**
     * Authorizes the user
     * @param authorizationRequestDto (optional) The authorization request
     * @return Success
     */
    authorize(authorizationRequestDto: AuthorizationRequestDto | null | undefined): Promise<UserAuthorizationResponseDto> {
        let url_ = this.baseUrl + "/users/authorize";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(authorizationRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAuthorize(_response);
        });
    }

    protected processAuthorize(response: AxiosResponse): Promise<UserAuthorizationResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserAuthorizationResponseDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserAuthorizationResponseDto>(<any>null);
    }

    /**
     * Gets the user
     * @param id The user identifier
     * @return Success
     */
    getByUserId(id: string): Promise<UserResponseDto> {
        let url_ = this.baseUrl + "/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetByUserId(_response);
        });
    }

    protected processGetByUserId(response: AxiosResponse): Promise<UserResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserResponseDto>(<any>null);
    }

    /**
     * Deletes the user
     * @param id The user identifier
     * @return Success
     */
    delete2(id: string): Promise<void> {
        let url_ = this.baseUrl + "/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete2(_response);
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Gets all card levels having been set for the user
     * @param id The user identifier
     * @return Success
     */
    getCardLevels(id: string): Promise<CardLevelResponseDto[]> {
        let url_ = this.baseUrl + "/users/{id}/card-levels";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCardLevels(_response);
        });
    }

    protected processGetCardLevels(response: AxiosResponse): Promise<CardLevelResponseDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CardLevelResponseDto.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardLevelResponseDto[]>(<any>null);
    }

    /**
     * Gets all existing cards and includes the level for the user if it has been set
     * @param id The user identifier
     * @return Success
     */
    getCardsWithUserLevels(id: string): Promise<UserCardResponseDto[]> {
        let url_ = this.baseUrl + "/users/{id}/cards";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCardsWithUserLevels(_response);
        });
    }

    protected processGetCardsWithUserLevels(response: AxiosResponse): Promise<UserCardResponseDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserCardResponseDto.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserCardResponseDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    verifyEmail(code: string): Promise<boolean> {
        let url_ = this.baseUrl + "/users/email-verification/{code}/verify";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processVerifyEmail(_response);
        });
    }

    protected processVerifyEmail(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * @return Success
     */
    resendVerificationMail(code: string): Promise<void> {
        let url_ = this.baseUrl + "/users/email-verification/{code}/resend";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processResendVerificationMail(_response);
        });
    }

    protected processResendVerificationMail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class CardLevelUpdateRequestDto {
    /** The user identifier */
    userId!: string;
    /** The card identifier */
    cardId!: string;
    /** The level of the card for the user (1-7). */
    level!: number;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.cardId = _data["cardId"];
            this.level = _data["level"];
        }
    }

    static fromJS(data: any): CardLevelUpdateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardLevelUpdateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["cardId"] = this.cardId;
        data["level"] = this.level;
        return data; 
    }
}

export class CardLevelResponseDto {
    /** The card level identifier */
    id!: string;
    /** The user identifier */
    userId!: string;
    /** The card identifier */
    cardId!: string;
    /** The level of the card for the user */
    level!: number;
    /** When the level has been last modified. */
    levelLastModified?: Date | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.cardId = _data["cardId"];
            this.level = _data["level"];
            this.levelLastModified = _data["levelLastModified"] ? new Date(_data["levelLastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CardLevelResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardLevelResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["cardId"] = this.cardId;
        data["level"] = this.level;
        data["levelLastModified"] = this.levelLastModified ? this.levelLastModified.toISOString() : <any>undefined;
        return data; 
    }
}

export class CardResponseDto {
    /** The card description. */
    description?: string | undefined;
    manaCost!: number;
    /** The external identifier */
    externalId?: string | undefined;
    /** The theme identifier */
    themeId!: string;
    /** The rarity identifier. */
    rarityId!: string;
    /** The type identifier. */
    typeId!: string;
    /** The character type identifier. */
    characterTypeId?: string | undefined;
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.manaCost = _data["manaCost"];
            this.externalId = _data["externalId"];
            this.themeId = _data["themeId"];
            this.rarityId = _data["rarityId"];
            this.typeId = _data["typeId"];
            this.characterTypeId = _data["characterTypeId"];
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdOnUtc = _data["createdOnUtc"] ? new Date(_data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = _data["modifiedOnUtc"] ? new Date(_data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): CardResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["manaCost"] = this.manaCost;
        data["externalId"] = this.externalId;
        data["themeId"] = this.themeId;
        data["rarityId"] = this.rarityId;
        data["typeId"] = this.typeId;
        data["characterTypeId"] = this.characterTypeId;
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

/** Specifies a card type (e.g. Spell, Ranged, Fighter) */
export class CardTypeResponseDto {
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdOnUtc = _data["createdOnUtc"] ? new Date(_data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = _data["modifiedOnUtc"] ? new Date(_data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): CardTypeResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardTypeResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

/** Specifies a card type (e.g. Assassin, Melee, Ranged) */
export class CharacterTypeResponseDto {
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdOnUtc = _data["createdOnUtc"] ? new Date(_data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = _data["modifiedOnUtc"] ? new Date(_data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): CharacterTypeResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterTypeResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

/** Specifies a rarity (e.g. Common, Legendary) */
export class RarityResponseDto {
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdOnUtc = _data["createdOnUtc"] ? new Date(_data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = _data["modifiedOnUtc"] ? new Date(_data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): RarityResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RarityResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

/** Specifies a theme (e.g. Sci-Fy, Adventure) */
export class ThemeResponseDto {
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdOnUtc = _data["createdOnUtc"] ? new Date(_data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = _data["modifiedOnUtc"] ? new Date(_data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): ThemeResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ThemeResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

export class TeamMembershipRequestDto {
    /** The team identifier */
    teamId!: string;
    /** The user identifier */
    userId!: string;
    /** The comment */
    comment?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.teamId = _data["teamId"];
            this.userId = _data["userId"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): TeamMembershipRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamMembershipRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamId"] = this.teamId;
        data["userId"] = this.userId;
        data["comment"] = this.comment;
        return data; 
    }
}

export class TeamCreateRequestDto {
    /** The team name */
    name!: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TeamCreateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamCreateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export class TeamResponseDto {
    /** The federation identifier */
    federationId?: string | undefined;
    /** The avatar */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.federationId = _data["federationId"];
            this.avatar = _data["avatar"];
            this.description = _data["description"];
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdOnUtc = _data["createdOnUtc"] ? new Date(_data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = _data["modifiedOnUtc"] ? new Date(_data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): TeamResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["federationId"] = this.federationId;
        data["avatar"] = this.avatar;
        data["description"] = this.description;
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

export class TeamUpdateRequestDto {
    /** The name of the team */
    name?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The team avatar */
    avatar?: string | undefined;
    /** The federation identifier */
    federationId?: string | undefined;
    /** The identifier of the entity to update */
    id!: string;
    /** Only the properties specified in this list will be updated. If NULL or empty, all properties will be updated. */
    propertiesToUpdate?: string[] | undefined;
    /** The entity version */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.avatar = _data["avatar"];
            this.federationId = _data["federationId"];
            this.id = _data["id"];
            if (Array.isArray(_data["propertiesToUpdate"])) {
                this.propertiesToUpdate = [] as any;
                for (let item of _data["propertiesToUpdate"])
                    this.propertiesToUpdate!.push(item);
            }
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): TeamUpdateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamUpdateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["avatar"] = this.avatar;
        data["federationId"] = this.federationId;
        data["id"] = this.id;
        if (Array.isArray(this.propertiesToUpdate)) {
            data["propertiesToUpdate"] = [];
            for (let item of this.propertiesToUpdate)
                data["propertiesToUpdate"].push(item);
        }
        data["version"] = this.version;
        return data; 
    }
}

export class UserResponseDto {
    /** The South Park Phone Destroyer in-game user name */
    sppdName!: string;
    /** The email address */
    email!: string;
    /** The application role the current user has */
    applicationRole!: string;
    /** The team identifier */
    teamId?: string | undefined;
    /** The team role */
    teamRole?: string | undefined;
    /** The federation identifier */
    federationId?: string | undefined;
    /** The federation role */
    federationRole?: string | undefined;
    /** The profile visibility determining who will be able to see the user profile */
    profileVisibility!: UserResponseDtoProfileVisibility;
    /** The avatar */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.sppdName = _data["sppdName"];
            this.email = _data["email"];
            this.applicationRole = _data["applicationRole"];
            this.teamId = _data["teamId"];
            this.teamRole = _data["teamRole"];
            this.federationId = _data["federationId"];
            this.federationRole = _data["federationRole"];
            this.profileVisibility = _data["profileVisibility"];
            this.avatar = _data["avatar"];
            this.description = _data["description"];
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdOnUtc = _data["createdOnUtc"] ? new Date(_data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = _data["modifiedOnUtc"] ? new Date(_data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): UserResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sppdName"] = this.sppdName;
        data["email"] = this.email;
        data["applicationRole"] = this.applicationRole;
        data["teamId"] = this.teamId;
        data["teamRole"] = this.teamRole;
        data["federationId"] = this.federationId;
        data["federationRole"] = this.federationRole;
        data["profileVisibility"] = this.profileVisibility;
        data["avatar"] = this.avatar;
        data["description"] = this.description;
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

export class TeamMembershipRequestResponseDto {
    /** The entity identifier */
    id!: string;
    /** The user identifier */
    userId!: string;
    /** The name of the user */
    userName!: string;
    /** The comment */
    comment?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): TeamMembershipRequestResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamMembershipRequestResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["comment"] = this.comment;
        return data; 
    }
}

export class UserCreateRequestDto {
    /** The user name */
    name!: string;
    /** The South Park Phone Destroyer in-game user name */
    sppdName!: string;
    /** The email address */
    email!: string;
    /** MD5 hash of the user password */
    passwordMd5!: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.sppdName = _data["sppdName"];
            this.email = _data["email"];
            this.passwordMd5 = _data["passwordMd5"];
        }
    }

    static fromJS(data: any): UserCreateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserCreateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["sppdName"] = this.sppdName;
        data["email"] = this.email;
        data["passwordMd5"] = this.passwordMd5;
        return data; 
    }
}

export class UserUpdateRequestDto {
    /** The user name */
    name?: string | undefined;
    /** The South Park Phone Destroyer in-game user name */
    sppdName?: string | undefined;
    /** The email address */
    email?: string | undefined;
    /** The avatar of the user */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The profile visibility determining who will be able to see the user profile. 0=User, 1=Team, 2=Federation */
    profileVisibility?: UserUpdateRequestDtoProfileVisibility | undefined;
    /** The identifier of the entity to update */
    id!: string;
    /** Only the properties specified in this list will be updated. If NULL or empty, all properties will be updated. */
    propertiesToUpdate?: string[] | undefined;
    /** The entity version */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.sppdName = _data["sppdName"];
            this.email = _data["email"];
            this.avatar = _data["avatar"];
            this.description = _data["description"];
            this.profileVisibility = _data["profileVisibility"];
            this.id = _data["id"];
            if (Array.isArray(_data["propertiesToUpdate"])) {
                this.propertiesToUpdate = [] as any;
                for (let item of _data["propertiesToUpdate"])
                    this.propertiesToUpdate!.push(item);
            }
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): UserUpdateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserUpdateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["sppdName"] = this.sppdName;
        data["email"] = this.email;
        data["avatar"] = this.avatar;
        data["description"] = this.description;
        data["profileVisibility"] = this.profileVisibility;
        data["id"] = this.id;
        if (Array.isArray(this.propertiesToUpdate)) {
            data["propertiesToUpdate"] = [];
            for (let item of this.propertiesToUpdate)
                data["propertiesToUpdate"].push(item);
        }
        data["version"] = this.version;
        return data; 
    }
}

export class AuthorizationRequestDto {
    /** User name */
    name!: string;
    /** MD5 hash of the user password */
    passwordMd5!: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.passwordMd5 = _data["passwordMd5"];
        }
    }

    static fromJS(data: any): AuthorizationRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizationRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["passwordMd5"] = this.passwordMd5;
        return data; 
    }
}

export class UserAuthorizationResponseDto {
    /** The token which will have to be set as bearer in the HTTP authorization header for subsequent calls requiring
authentication */
    token!: string;
    /** The South Park Phone Destroyer in-game user name */
    sppdName!: string;
    /** The email address */
    email!: string;
    /** The application role the current user has */
    applicationRole!: string;
    /** The team identifier */
    teamId?: string | undefined;
    /** The team role */
    teamRole?: string | undefined;
    /** The federation identifier */
    federationId?: string | undefined;
    /** The federation role */
    federationRole?: string | undefined;
    /** The profile visibility determining who will be able to see the user profile */
    profileVisibility!: UserAuthorizationResponseDtoProfileVisibility;
    /** The avatar */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.sppdName = _data["sppdName"];
            this.email = _data["email"];
            this.applicationRole = _data["applicationRole"];
            this.teamId = _data["teamId"];
            this.teamRole = _data["teamRole"];
            this.federationId = _data["federationId"];
            this.federationRole = _data["federationRole"];
            this.profileVisibility = _data["profileVisibility"];
            this.avatar = _data["avatar"];
            this.description = _data["description"];
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdOnUtc = _data["createdOnUtc"] ? new Date(_data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = _data["modifiedOnUtc"] ? new Date(_data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): UserAuthorizationResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserAuthorizationResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["sppdName"] = this.sppdName;
        data["email"] = this.email;
        data["applicationRole"] = this.applicationRole;
        data["teamId"] = this.teamId;
        data["teamRole"] = this.teamRole;
        data["federationId"] = this.federationId;
        data["federationRole"] = this.federationRole;
        data["profileVisibility"] = this.profileVisibility;
        data["avatar"] = this.avatar;
        data["description"] = this.description;
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

export class UserCardResponseDto {
    /** The card identifier */
    cardId!: string;
    /** The name of the card */
    cardName!: string;
    /** The user identifier */
    userId!: string;
    /** The theme identifier */
    themeId!: string;
    /** The rarity identifier. */
    rarityId!: string;
    /** The type identifier. */
    typeId!: string;
    /** The character type identifier. */
    characterTypeId!: string;
    /** The level (NULL if not set) */
    level?: number | undefined;
    /** When the level has been last modified. */
    levelLastModified?: Date | undefined;

    init(_data?: any) {
        if (_data) {
            this.cardId = _data["cardId"];
            this.cardName = _data["cardName"];
            this.userId = _data["userId"];
            this.themeId = _data["themeId"];
            this.rarityId = _data["rarityId"];
            this.typeId = _data["typeId"];
            this.characterTypeId = _data["characterTypeId"];
            this.level = _data["level"];
            this.levelLastModified = _data["levelLastModified"] ? new Date(_data["levelLastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserCardResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserCardResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cardId"] = this.cardId;
        data["cardName"] = this.cardName;
        data["userId"] = this.userId;
        data["themeId"] = this.themeId;
        data["rarityId"] = this.rarityId;
        data["typeId"] = this.typeId;
        data["characterTypeId"] = this.characterTypeId;
        data["level"] = this.level;
        data["levelLastModified"] = this.levelLastModified ? this.levelLastModified.toISOString() : <any>undefined;
        return data; 
    }
}

export enum UserResponseDtoProfileVisibility {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum UserUpdateRequestDtoProfileVisibility {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum UserAuthorizationResponseDtoProfileVisibility {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}