/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.3.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

export class AdministrationClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Gets the system information containing the version, GIT commit hash and build time.
     * @return Success
     */
    getSystemInfo(): Promise<SystemInfoDto> {
        let url_ = this.baseUrl + "/administration/system-info";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetSystemInfo(_response);
        });
    }

    protected processGetSystemInfo(response: AxiosResponse): Promise<SystemInfoDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SystemInfoDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SystemInfoDto>(<any>null);
    }
}

export class CardLevelsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Sets the card level for the given user and card
     * @param cardLevelUpdateDto (optional) The card level update
     * @return Success
     */
    setCardLevel(cardLevelUpdateDto: CardLevelUpdateRequestDto | null | undefined): Promise<CardLevelResponseDto> {
        let url_ = this.baseUrl + "/card-levels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(cardLevelUpdateDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSetCardLevel(_response);
        });
    }

    protected processSetCardLevel(response: AxiosResponse): Promise<CardLevelResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CardLevelResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardLevelResponseDto>(<any>null);
    }
}

export class CardsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Gets all the cards
     * @return Success
     */
    getAllCards(): Promise<CardResponseDto[]> {
        let url_ = this.baseUrl + "/cards";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllCards(_response);
        });
    }

    protected processGetAllCards(response: AxiosResponse): Promise<CardResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CardResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardResponseDto[]>(<any>null);
    }
}

export class CoreDataClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Gets all card types (Spell, Spawn, Character)
     * @return Success
     */
    getCardTypes(): Promise<CardTypeResponseDto[]> {
        let url_ = this.baseUrl + "/core-data/card-types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCardTypes(_response);
        });
    }

    protected processGetCardTypes(response: AxiosResponse): Promise<CardTypeResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CardTypeResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardTypeResponseDto[]>(<any>null);
    }

    /**
     * Gets all character types (Assassin, Melee...)
     * @return Success
     */
    getCharacterTypes(): Promise<CharacterTypeResponseDto[]> {
        let url_ = this.baseUrl + "/core-data/character-types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCharacterTypes(_response);
        });
    }

    protected processGetCharacterTypes(response: AxiosResponse): Promise<CharacterTypeResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CharacterTypeResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CharacterTypeResponseDto[]>(<any>null);
    }

    /**
     * Gets all rarities (Common, Rare...)
     * @return Success
     */
    getRarities(): Promise<RarityResponseDto[]> {
        let url_ = this.baseUrl + "/core-data/rarities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetRarities(_response);
        });
    }

    protected processGetRarities(response: AxiosResponse): Promise<RarityResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RarityResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RarityResponseDto[]>(<any>null);
    }

    /**
     * Gets all themes (Sci-fy, Fantasy...)
     * @return Success
     */
    getThemes(): Promise<ThemeResponseDto[]> {
        let url_ = this.baseUrl + "/core-data/themes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetThemes(_response);
        });
    }

    protected processGetThemes(response: AxiosResponse): Promise<ThemeResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ThemeResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ThemeResponseDto[]>(<any>null);
    }
}

export class EmailVerificationClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Verifies the email with the given code.
     * @param code The code.
     * @return Success
     */
    verifyEmail(code: string): Promise<boolean> {
        let url_ = this.baseUrl + "/email-verification/{code}/verify";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processVerifyEmail(_response);
        });
    }

    protected processVerifyEmail(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Sends a previously sent verification email.
     * @param code The code.
     * @return Success
     */
    resendVerificationEmail(code: string): Promise<void> {
        let url_ = this.baseUrl + "/email-verification/{code}/resend";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processResendVerificationEmail(_response);
        });
    }

    protected processResendVerificationEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class TeamMembershipRequestsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Gets the pending team membership request for the user.
     * @param userId (optional) The user identifier.
     * @return Success
     */
    getPendingTeamMembershipRequest(userId: string | null | undefined): Promise<TeamMembershipRequestResponseDto> {
        let url_ = this.baseUrl + "/team-membership-requests?";
        if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPendingTeamMembershipRequest(_response);
        });
    }

    protected processGetPendingTeamMembershipRequest(response: AxiosResponse): Promise<TeamMembershipRequestResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TeamMembershipRequestResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamMembershipRequestResponseDto>(<any>null);
    }

    /**
     * Requests membership in a team for a user
     * @param membershipRequest (optional) The membership request for a user to join a team
     * @return Success
     */
    requestMembership(membershipRequest: TeamMembershipRequestDto | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/team-membership-requests";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(membershipRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRequestMembership(_response);
        });
    }

    protected processRequestMembership(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Accepts the membership request
     * @param id The membership request identifier
     * @return Success
     */
    acceptMembershipRequest(id: string): Promise<void> {
        let url_ = this.baseUrl + "/team-membership-requests/{id}/accept";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAcceptMembershipRequest(_response);
        });
    }

    protected processAcceptMembershipRequest(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Rejects the membership request
     * @param id The membership request identifier
     * @return Success
     */
    rejectMembershipRequest(id: string): Promise<void> {
        let url_ = this.baseUrl + "/team-membership-requests/{id}/reject";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRejectMembershipRequest(_response);
        });
    }

    protected processRejectMembershipRequest(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Aborts the membership request
     * @param id The membership request identifier
     * @return Success
     */
    abortMembershipRequest(id: string): Promise<void> {
        let url_ = this.baseUrl + "/team-membership-requests/{id}/abort";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAbortMembershipRequest(_response);
        });
    }

    protected processAbortMembershipRequest(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class TeamsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Get all teams containing the specified name in their name.
     * @param name The name having to be contained in the team name.
     * @return Success
     */
    searchTeamByName(name: string): Promise<TeamResponseDto[]> {
        let url_ = this.baseUrl + "/teams?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined and cannot be null.");
        else
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchTeamByName(_response);
        });
    }

    protected processSearchTeamByName(response: AxiosResponse): Promise<TeamResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TeamResponseDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponseDto[]>(<any>null);
    }

    /**
     * Updates the team
     * @param teamUpdateRequestDto The team update request
     * @return Success
     */
    updateTeam(teamUpdateRequestDto: TeamUpdateRequestDto): Promise<TeamResponseDto> {
        let url_ = this.baseUrl + "/teams";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(teamUpdateRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateTeam(_response);
        });
    }

    protected processUpdateTeam(response: AxiosResponse): Promise<TeamResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TeamResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponseDto>(<any>null);
    }

    /**
     * Creates a new team
     * @param teamCreateRequestDto The team creation request
     * @return Success
     */
    createTeam(teamCreateRequestDto: TeamCreateRequestDto): Promise<TeamResponseDto> {
        let url_ = this.baseUrl + "/teams";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(teamCreateRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateTeam(_response);
        });
    }

    protected processCreateTeam(response: AxiosResponse): Promise<TeamResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TeamResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponseDto>(<any>null);
    }

    /**
     * Gets the team
     * @param id The team identifier
     * @return Success
     */
    getTeamById(id: string): Promise<TeamResponseDto> {
        let url_ = this.baseUrl + "/teams/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetTeamById(_response);
        });
    }

    protected processGetTeamById(response: AxiosResponse): Promise<TeamResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TeamResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponseDto>(<any>null);
    }

    /**
     * Deletes the team
     * @param id The team identifier
     * @return Success
     */
    deleteTeam(id: string): Promise<void> {
        let url_ = this.baseUrl + "/teams/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteTeam(_response);
        });
    }

    protected processDeleteTeam(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Gets the team members.
     * @param id The team identifier
     * @return Success
     */
    getTeamMembers(id: string): Promise<UserResponseDto[]> {
        let url_ = this.baseUrl + "/teams/{id}/members";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetTeamMembers(_response);
        });
    }

    protected processGetTeamMembers(response: AxiosResponse): Promise<UserResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserResponseDto.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserResponseDto[]>(<any>null);
    }

    /**
     * Gets the team membership requests.
     * @param id The team identifier
     * @return Success
     */
    getTeamMembershipRequests(id: string): Promise<TeamMembershipRequestResponseDto[]> {
        let url_ = this.baseUrl + "/teams/{id}/membership-requests";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetTeamMembershipRequests(_response);
        });
    }

    protected processGetTeamMembershipRequests(response: AxiosResponse): Promise<TeamMembershipRequestResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TeamMembershipRequestResponseDto.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamMembershipRequestResponseDto[]>(<any>null);
    }

    /**
     * Updates the team role for the user.
     * @param id The team identifier.
     * @param userId The user identifier.
     * @param role The role.
     * @return Success
     */
    updateMemberTeamRole(id: string, userId: string, role: string): Promise<string> {
        let url_ = this.baseUrl + "/teams/{id}/members/{userId}/role";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(role);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateMemberTeamRole(_response);
        });
    }

    protected processUpdateMemberTeamRole(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * Removes the member from the team.
     * @param id The team identifier.
     * @param userId The user identifier.
     * @return Success
     */
    removeMember(id: string, userId: string): Promise<void> {
        let url_ = this.baseUrl + "/teams/{id}/members/{userId}/remove";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemoveMember(_response);
        });
    }

    protected processRemoveMember(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTeamCards(id: string): Promise<TeamCardsResponseDto> {
        let url_ = this.baseUrl + "/teams/{id}/cards";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetTeamCards(_response);
        });
    }

    protected processGetTeamCards(response: AxiosResponse): Promise<TeamCardsResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TeamCardsResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamCardsResponseDto>(<any>null);
    }
}

export class UsersClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Updates the user
     * @param userRequestDto (optional) The user update request
     * @return Success
     */
    updateUser(userRequestDto: UserUpdateRequestDto | null | undefined): Promise<UserResponseDto> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateUser(_response);
        });
    }

    protected processUpdateUser(response: AxiosResponse): Promise<UserResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserResponseDto>(<any>null);
    }

    /**
     * Creates a new user
     * @param userCreateRequestDto (optional) The user creation request
     * @return Success
     */
    registerUser(userCreateRequestDto: UserCreateRequestDto | null | undefined): Promise<UserResponseDto> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userCreateRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegisterUser(_response);
        });
    }

    protected processRegisterUser(response: AxiosResponse): Promise<UserResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserResponseDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserResponseDto>(<any>null);
    }

    /**
     * Authorizes the user
     * @param authorizationRequestDto (optional) The authorization request
     * @return Success
     */
    authorizeUser(authorizationRequestDto: AuthorizationRequestDto | null | undefined): Promise<UserAuthorizationResponseDto> {
        let url_ = this.baseUrl + "/users/authorize";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(authorizationRequestDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAuthorizeUser(_response);
        });
    }

    protected processAuthorizeUser(response: AxiosResponse): Promise<UserAuthorizationResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserAuthorizationResponseDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserAuthorizationResponseDto>(<any>null);
    }

    /**
     * Gets the user
     * @param id The user identifier
     * @return Success
     */
    getUserByUserId(id: string): Promise<UserResponseDto> {
        let url_ = this.baseUrl + "/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUserByUserId(_response);
        });
    }

    protected processGetUserByUserId(response: AxiosResponse): Promise<UserResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserResponseDto>(<any>null);
    }

    /**
     * Deletes the user
     * @param id The user identifier
     * @return Success
     */
    deleteUser(id: string): Promise<void> {
        let url_ = this.baseUrl + "/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Gets all card levels having been set for the user
     * @param id The user identifier
     * @return Success
     */
    getUserCardLevels(id: string): Promise<CardLevelResponseDto[]> {
        let url_ = this.baseUrl + "/users/{id}/card-levels";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUserCardLevels(_response);
        });
    }

    protected processGetUserCardLevels(response: AxiosResponse): Promise<CardLevelResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CardLevelResponseDto.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardLevelResponseDto[]>(<any>null);
    }

    /**
     * Gets all existing cards and includes the level for the user if it has been set
     * @param id The user identifier
     * @return Success
     */
    getUserCards(id: string): Promise<UserCardsResponseDto> {
        let url_ = this.baseUrl + "/users/{id}/cards";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUserCards(_response);
        });
    }

    protected processGetUserCards(response: AxiosResponse): Promise<UserCardsResponseDto> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserCardsResponseDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserCardsResponseDto>(<any>null);
    }
}

export class SystemInfoDto implements ISystemInfoDto {
    version!: string;
    gitCommitHash?: string | undefined;
    buildTimeUtc?: Date | undefined;

    constructor(data?: ISystemInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.version = data["version"];
            this.gitCommitHash = data["gitCommitHash"];
            this.buildTimeUtc = data["buildTimeUtc"] ? new Date(data["buildTimeUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SystemInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new SystemInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["gitCommitHash"] = this.gitCommitHash;
        data["buildTimeUtc"] = this.buildTimeUtc ? this.buildTimeUtc.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ISystemInfoDto {
    version: string;
    gitCommitHash?: string | undefined;
    buildTimeUtc?: Date | undefined;
}

export class CardLevelUpdateRequestDto implements ICardLevelUpdateRequestDto {
    /** The user identifier */
    userId!: string;
    /** The card identifier */
    cardId!: string;
    /** The level of the card for the user (1-7). */
    level!: number;

    constructor(data?: ICardLevelUpdateRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.cardId = data["cardId"];
            this.level = data["level"];
        }
    }

    static fromJS(data: any): CardLevelUpdateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardLevelUpdateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["cardId"] = this.cardId;
        data["level"] = this.level;
        return data; 
    }
}

export interface ICardLevelUpdateRequestDto {
    /** The user identifier */
    userId: string;
    /** The card identifier */
    cardId: string;
    /** The level of the card for the user (1-7). */
    level: number;
}

export class CardLevelResponseDto implements ICardLevelResponseDto {
    /** The card level identifier */
    id!: string;
    /** The user identifier */
    userId!: string;
    /** The card identifier */
    cardId!: string;
    /** The level of the card for the user */
    level!: number;
    /** When the level has been last modified. */
    levelLastModified?: Date | undefined;

    constructor(data?: ICardLevelResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.cardId = data["cardId"];
            this.level = data["level"];
            this.levelLastModified = data["levelLastModified"] ? new Date(data["levelLastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CardLevelResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardLevelResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["cardId"] = this.cardId;
        data["level"] = this.level;
        data["levelLastModified"] = this.levelLastModified ? this.levelLastModified.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICardLevelResponseDto {
    /** The card level identifier */
    id: string;
    /** The user identifier */
    userId: string;
    /** The card identifier */
    cardId: string;
    /** The level of the card for the user */
    level: number;
    /** When the level has been last modified. */
    levelLastModified?: Date | undefined;
}

export class CardResponseDto implements ICardResponseDto {
    /** The card description. */
    description?: string | undefined;
    manaCost!: number;
    /** The external identifier */
    externalId?: string | undefined;
    /** The theme identifier */
    themeId!: string;
    /** The rarity identifier. */
    rarityId!: string;
    /** The type identifier. */
    typeId!: string;
    /** The character type identifier. */
    characterTypeId?: string | undefined;
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    constructor(data?: ICardResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.description = data["description"];
            this.manaCost = data["manaCost"];
            this.externalId = data["externalId"];
            this.themeId = data["themeId"];
            this.rarityId = data["rarityId"];
            this.typeId = data["typeId"];
            this.characterTypeId = data["characterTypeId"];
            this.name = data["name"];
            this.id = data["id"];
            this.createdOnUtc = data["createdOnUtc"] ? new Date(data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = data["modifiedOnUtc"] ? new Date(data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = data["version"];
        }
    }

    static fromJS(data: any): CardResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["manaCost"] = this.manaCost;
        data["externalId"] = this.externalId;
        data["themeId"] = this.themeId;
        data["rarityId"] = this.rarityId;
        data["typeId"] = this.typeId;
        data["characterTypeId"] = this.characterTypeId;
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

export interface ICardResponseDto {
    /** The card description. */
    description?: string | undefined;
    manaCost: number;
    /** The external identifier */
    externalId?: string | undefined;
    /** The theme identifier */
    themeId: string;
    /** The rarity identifier. */
    rarityId: string;
    /** The type identifier. */
    typeId: string;
    /** The character type identifier. */
    characterTypeId?: string | undefined;
    /** The entity name */
    name: string;
    /** The entity identifier */
    id: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc: Date;
    /** The entity version. */
    version: string;
}

/** Specifies a card type (e.g. Spell, Ranged, Fighter) */
export class CardTypeResponseDto implements ICardTypeResponseDto {
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    constructor(data?: ICardTypeResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.id = data["id"];
            this.createdOnUtc = data["createdOnUtc"] ? new Date(data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = data["modifiedOnUtc"] ? new Date(data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = data["version"];
        }
    }

    static fromJS(data: any): CardTypeResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardTypeResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

/** Specifies a card type (e.g. Spell, Ranged, Fighter) */
export interface ICardTypeResponseDto {
    /** The entity name */
    name: string;
    /** The entity identifier */
    id: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc: Date;
    /** The entity version. */
    version: string;
}

/** Specifies a card type (e.g. Assassin, Melee, Ranged) */
export class CharacterTypeResponseDto implements ICharacterTypeResponseDto {
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    constructor(data?: ICharacterTypeResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.id = data["id"];
            this.createdOnUtc = data["createdOnUtc"] ? new Date(data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = data["modifiedOnUtc"] ? new Date(data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = data["version"];
        }
    }

    static fromJS(data: any): CharacterTypeResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterTypeResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

/** Specifies a card type (e.g. Assassin, Melee, Ranged) */
export interface ICharacterTypeResponseDto {
    /** The entity name */
    name: string;
    /** The entity identifier */
    id: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc: Date;
    /** The entity version. */
    version: string;
}

/** Specifies a rarity (e.g. Common, Legendary) */
export class RarityResponseDto implements IRarityResponseDto {
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    constructor(data?: IRarityResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.id = data["id"];
            this.createdOnUtc = data["createdOnUtc"] ? new Date(data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = data["modifiedOnUtc"] ? new Date(data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = data["version"];
        }
    }

    static fromJS(data: any): RarityResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RarityResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

/** Specifies a rarity (e.g. Common, Legendary) */
export interface IRarityResponseDto {
    /** The entity name */
    name: string;
    /** The entity identifier */
    id: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc: Date;
    /** The entity version. */
    version: string;
}

/** Specifies a theme (e.g. Sci-Fy, Adventure) */
export class ThemeResponseDto implements IThemeResponseDto {
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    constructor(data?: IThemeResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.id = data["id"];
            this.createdOnUtc = data["createdOnUtc"] ? new Date(data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = data["modifiedOnUtc"] ? new Date(data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = data["version"];
        }
    }

    static fromJS(data: any): ThemeResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ThemeResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

/** Specifies a theme (e.g. Sci-Fy, Adventure) */
export interface IThemeResponseDto {
    /** The entity name */
    name: string;
    /** The entity identifier */
    id: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc: Date;
    /** The entity version. */
    version: string;
}

export class TeamMembershipRequestDto implements ITeamMembershipRequestDto {
    /** The team identifier */
    teamId!: string;
    /** The user identifier */
    userId!: string;
    /** The comment */
    comment?: string | undefined;

    constructor(data?: ITeamMembershipRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.teamId = data["teamId"];
            this.userId = data["userId"];
            this.comment = data["comment"];
        }
    }

    static fromJS(data: any): TeamMembershipRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamMembershipRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamId"] = this.teamId;
        data["userId"] = this.userId;
        data["comment"] = this.comment;
        return data; 
    }
}

export interface ITeamMembershipRequestDto {
    /** The team identifier */
    teamId: string;
    /** The user identifier */
    userId: string;
    /** The comment */
    comment?: string | undefined;
}

export class TeamMembershipRequestResponseDto implements ITeamMembershipRequestResponseDto {
    /** The entity identifier */
    id!: string;
    /** The user identifier */
    userId!: string;
    /** The name of the user */
    userName!: string;
    /** The comment */
    comment?: string | undefined;
    teamId!: string;
    teamName!: string;
    requestDateUtc?: Date | undefined;

    constructor(data?: ITeamMembershipRequestResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.comment = data["comment"];
            this.teamId = data["teamId"];
            this.teamName = data["teamName"];
            this.requestDateUtc = data["requestDateUtc"] ? new Date(data["requestDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TeamMembershipRequestResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamMembershipRequestResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["comment"] = this.comment;
        data["teamId"] = this.teamId;
        data["teamName"] = this.teamName;
        data["requestDateUtc"] = this.requestDateUtc ? this.requestDateUtc.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ITeamMembershipRequestResponseDto {
    /** The entity identifier */
    id: string;
    /** The user identifier */
    userId: string;
    /** The name of the user */
    userName: string;
    /** The comment */
    comment?: string | undefined;
    teamId: string;
    teamName: string;
    requestDateUtc?: Date | undefined;
}

export class TeamCreateRequestDto implements ITeamCreateRequestDto {
    /** The team name */
    name!: string;

    constructor(data?: ITeamCreateRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): TeamCreateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamCreateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ITeamCreateRequestDto {
    /** The team name */
    name: string;
}

export class TeamResponseDto implements ITeamResponseDto {
    /** The federation identifier */
    federationId?: string | undefined;
    /** The avatar */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    constructor(data?: ITeamResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.federationId = data["federationId"];
            this.avatar = data["avatar"];
            this.description = data["description"];
            this.name = data["name"];
            this.id = data["id"];
            this.createdOnUtc = data["createdOnUtc"] ? new Date(data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = data["modifiedOnUtc"] ? new Date(data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = data["version"];
        }
    }

    static fromJS(data: any): TeamResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["federationId"] = this.federationId;
        data["avatar"] = this.avatar;
        data["description"] = this.description;
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

export interface ITeamResponseDto {
    /** The federation identifier */
    federationId?: string | undefined;
    /** The avatar */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The entity name */
    name: string;
    /** The entity identifier */
    id: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc: Date;
    /** The entity version. */
    version: string;
}

export class TeamUpdateRequestDto implements ITeamUpdateRequestDto {
    /** The name of the team */
    name?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The team avatar */
    avatar?: string | undefined;
    /** The federation identifier */
    federationId?: string | undefined;
    /** The identifier of the entity to update */
    id!: string;
    /** Only the properties specified in this list will be updated. If NULL or empty, all properties will be updated. */
    propertiesToUpdate?: string[] | undefined;
    /** The entity version */
    version!: string;

    constructor(data?: ITeamUpdateRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.description = data["description"];
            this.avatar = data["avatar"];
            this.federationId = data["federationId"];
            this.id = data["id"];
            if (Array.isArray(data["propertiesToUpdate"])) {
                this.propertiesToUpdate = [] as any;
                for (let item of data["propertiesToUpdate"])
                    this.propertiesToUpdate!.push(item);
            }
            this.version = data["version"];
        }
    }

    static fromJS(data: any): TeamUpdateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamUpdateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["avatar"] = this.avatar;
        data["federationId"] = this.federationId;
        data["id"] = this.id;
        if (Array.isArray(this.propertiesToUpdate)) {
            data["propertiesToUpdate"] = [];
            for (let item of this.propertiesToUpdate)
                data["propertiesToUpdate"].push(item);
        }
        data["version"] = this.version;
        return data; 
    }
}

export interface ITeamUpdateRequestDto {
    /** The name of the team */
    name?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The team avatar */
    avatar?: string | undefined;
    /** The federation identifier */
    federationId?: string | undefined;
    /** The identifier of the entity to update */
    id: string;
    /** Only the properties specified in this list will be updated. If NULL or empty, all properties will be updated. */
    propertiesToUpdate?: string[] | undefined;
    /** The entity version */
    version: string;
}

export class UserResponseDto implements IUserResponseDto {
    /** The South Park Phone Destroyer in-game user name */
    sppdName!: string;
    /** The email address */
    email!: string;
    /** The application role the current user has */
    applicationRole!: string;
    /** The team identifier */
    teamId?: string | undefined;
    /** The name of the team. */
    teamName?: string | undefined;
    /** The team role */
    teamRole?: string | undefined;
    /** The federation identifier */
    federationId?: string | undefined;
    /** The federation role */
    federationRole?: string | undefined;
    /** The profile visibility determining who will be able to see the user profile */
    profileVisibility!: UserResponseDtoProfileVisibility;
    /** The avatar */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    constructor(data?: IUserResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sppdName = data["sppdName"];
            this.email = data["email"];
            this.applicationRole = data["applicationRole"];
            this.teamId = data["teamId"];
            this.teamName = data["teamName"];
            this.teamRole = data["teamRole"];
            this.federationId = data["federationId"];
            this.federationRole = data["federationRole"];
            this.profileVisibility = data["profileVisibility"];
            this.avatar = data["avatar"];
            this.description = data["description"];
            this.name = data["name"];
            this.id = data["id"];
            this.createdOnUtc = data["createdOnUtc"] ? new Date(data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = data["modifiedOnUtc"] ? new Date(data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = data["version"];
        }
    }

    static fromJS(data: any): UserResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sppdName"] = this.sppdName;
        data["email"] = this.email;
        data["applicationRole"] = this.applicationRole;
        data["teamId"] = this.teamId;
        data["teamName"] = this.teamName;
        data["teamRole"] = this.teamRole;
        data["federationId"] = this.federationId;
        data["federationRole"] = this.federationRole;
        data["profileVisibility"] = this.profileVisibility;
        data["avatar"] = this.avatar;
        data["description"] = this.description;
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

export interface IUserResponseDto {
    /** The South Park Phone Destroyer in-game user name */
    sppdName: string;
    /** The email address */
    email: string;
    /** The application role the current user has */
    applicationRole: string;
    /** The team identifier */
    teamId?: string | undefined;
    /** The name of the team. */
    teamName?: string | undefined;
    /** The team role */
    teamRole?: string | undefined;
    /** The federation identifier */
    federationId?: string | undefined;
    /** The federation role */
    federationRole?: string | undefined;
    /** The profile visibility determining who will be able to see the user profile */
    profileVisibility: UserResponseDtoProfileVisibility;
    /** The avatar */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The entity name */
    name: string;
    /** The entity identifier */
    id: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc: Date;
    /** The entity version. */
    version: string;
}

export class TeamCardsResponseDto implements ITeamCardsResponseDto {
    teamId?: string | undefined;
    cards?: TeamCardResponseDto[] | undefined;

    constructor(data?: ITeamCardsResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.teamId = data["teamId"];
            if (Array.isArray(data["cards"])) {
                this.cards = [] as any;
                for (let item of data["cards"])
                    this.cards!.push(TeamCardResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TeamCardsResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamCardsResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamId"] = this.teamId;
        if (Array.isArray(this.cards)) {
            data["cards"] = [];
            for (let item of this.cards)
                data["cards"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITeamCardsResponseDto {
    teamId?: string | undefined;
    cards?: TeamCardResponseDto[] | undefined;
}

export class TeamCardResponseDto implements ITeamCardResponseDto {
    /** Gets or sets the levels. Key=level (1-7); Value=number of members having the card at this level. */
    levels?: { [key: string] : number; } | undefined;
    /** The card identifier */
    cardId!: string;
    /** The name of the card */
    cardName!: string;
    /** The theme identifier */
    themeId!: string;
    /** The rarity identifier. */
    rarityId!: string;
    /** The type identifier. */
    typeId!: string;
    /** The character type identifier. */
    characterTypeId!: string;

    constructor(data?: ITeamCardResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["levels"]) {
                this.levels = {} as any;
                for (let key in data["levels"]) {
                    if (data["levels"].hasOwnProperty(key))
                        this.levels![key] = data["levels"][key];
                }
            }
            this.cardId = data["cardId"];
            this.cardName = data["cardName"];
            this.themeId = data["themeId"];
            this.rarityId = data["rarityId"];
            this.typeId = data["typeId"];
            this.characterTypeId = data["characterTypeId"];
        }
    }

    static fromJS(data: any): TeamCardResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamCardResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.levels) {
            data["levels"] = {};
            for (let key in this.levels) {
                if (this.levels.hasOwnProperty(key))
                    data["levels"][key] = this.levels[key];
            }
        }
        data["cardId"] = this.cardId;
        data["cardName"] = this.cardName;
        data["themeId"] = this.themeId;
        data["rarityId"] = this.rarityId;
        data["typeId"] = this.typeId;
        data["characterTypeId"] = this.characterTypeId;
        return data; 
    }
}

export interface ITeamCardResponseDto {
    /** Gets or sets the levels. Key=level (1-7); Value=number of members having the card at this level. */
    levels?: { [key: string] : number; } | undefined;
    /** The card identifier */
    cardId: string;
    /** The name of the card */
    cardName: string;
    /** The theme identifier */
    themeId: string;
    /** The rarity identifier. */
    rarityId: string;
    /** The type identifier. */
    typeId: string;
    /** The character type identifier. */
    characterTypeId: string;
}

export class UserCreateRequestDto implements IUserCreateRequestDto {
    /** The user name */
    name!: string;
    /** The South Park Phone Destroyer in-game user name */
    sppdName!: string;
    /** The email address */
    email!: string;
    /** MD5 hash of the user password */
    passwordMd5!: string;

    constructor(data?: IUserCreateRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.sppdName = data["sppdName"];
            this.email = data["email"];
            this.passwordMd5 = data["passwordMd5"];
        }
    }

    static fromJS(data: any): UserCreateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserCreateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["sppdName"] = this.sppdName;
        data["email"] = this.email;
        data["passwordMd5"] = this.passwordMd5;
        return data; 
    }
}

export interface IUserCreateRequestDto {
    /** The user name */
    name: string;
    /** The South Park Phone Destroyer in-game user name */
    sppdName: string;
    /** The email address */
    email: string;
    /** MD5 hash of the user password */
    passwordMd5: string;
}

export class UserUpdateRequestDto implements IUserUpdateRequestDto {
    /** The user name */
    name?: string | undefined;
    /** The South Park Phone Destroyer in-game user name */
    sppdName?: string | undefined;
    /** The email address */
    email?: string | undefined;
    /** The avatar of the user */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** MD5 hash of the user password */
    passwordMd5?: string | undefined;
    /** The profile visibility determining who will be able to see the user profile. 0=User, 1=Team, 2=Federation */
    profileVisibility?: UserUpdateRequestDtoProfileVisibility | undefined;
    /** The identifier of the entity to update */
    id!: string;
    /** Only the properties specified in this list will be updated. If NULL or empty, all properties will be updated. */
    propertiesToUpdate?: string[] | undefined;
    /** The entity version */
    version!: string;

    constructor(data?: IUserUpdateRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.sppdName = data["sppdName"];
            this.email = data["email"];
            this.avatar = data["avatar"];
            this.description = data["description"];
            this.passwordMd5 = data["passwordMd5"];
            this.profileVisibility = data["profileVisibility"];
            this.id = data["id"];
            if (Array.isArray(data["propertiesToUpdate"])) {
                this.propertiesToUpdate = [] as any;
                for (let item of data["propertiesToUpdate"])
                    this.propertiesToUpdate!.push(item);
            }
            this.version = data["version"];
        }
    }

    static fromJS(data: any): UserUpdateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserUpdateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["sppdName"] = this.sppdName;
        data["email"] = this.email;
        data["avatar"] = this.avatar;
        data["description"] = this.description;
        data["passwordMd5"] = this.passwordMd5;
        data["profileVisibility"] = this.profileVisibility;
        data["id"] = this.id;
        if (Array.isArray(this.propertiesToUpdate)) {
            data["propertiesToUpdate"] = [];
            for (let item of this.propertiesToUpdate)
                data["propertiesToUpdate"].push(item);
        }
        data["version"] = this.version;
        return data; 
    }
}

export interface IUserUpdateRequestDto {
    /** The user name */
    name?: string | undefined;
    /** The South Park Phone Destroyer in-game user name */
    sppdName?: string | undefined;
    /** The email address */
    email?: string | undefined;
    /** The avatar of the user */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** MD5 hash of the user password */
    passwordMd5?: string | undefined;
    /** The profile visibility determining who will be able to see the user profile. 0=User, 1=Team, 2=Federation */
    profileVisibility?: UserUpdateRequestDtoProfileVisibility | undefined;
    /** The identifier of the entity to update */
    id: string;
    /** Only the properties specified in this list will be updated. If NULL or empty, all properties will be updated. */
    propertiesToUpdate?: string[] | undefined;
    /** The entity version */
    version: string;
}

export class AuthorizationRequestDto implements IAuthorizationRequestDto {
    /** User name */
    name!: string;
    /** MD5 hash of the user password */
    passwordMd5!: string;

    constructor(data?: IAuthorizationRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.passwordMd5 = data["passwordMd5"];
        }
    }

    static fromJS(data: any): AuthorizationRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizationRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["passwordMd5"] = this.passwordMd5;
        return data; 
    }
}

export interface IAuthorizationRequestDto {
    /** User name */
    name: string;
    /** MD5 hash of the user password */
    passwordMd5: string;
}

export class UserAuthorizationResponseDto implements IUserAuthorizationResponseDto {
    /** The token which will have to be set as bearer in the HTTP authorization header for subsequent calls requiring
authentication */
    token!: string;
    /** The South Park Phone Destroyer in-game user name */
    sppdName!: string;
    /** The email address */
    email!: string;
    /** The application role the current user has */
    applicationRole!: string;
    /** The team identifier */
    teamId?: string | undefined;
    /** The name of the team. */
    teamName?: string | undefined;
    /** The team role */
    teamRole?: string | undefined;
    /** The federation identifier */
    federationId?: string | undefined;
    /** The federation role */
    federationRole?: string | undefined;
    /** The profile visibility determining who will be able to see the user profile */
    profileVisibility!: UserAuthorizationResponseDtoProfileVisibility;
    /** The avatar */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The entity name */
    name!: string;
    /** The entity identifier */
    id!: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc!: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc!: Date;
    /** The entity version. */
    version!: string;

    constructor(data?: IUserAuthorizationResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"];
            this.sppdName = data["sppdName"];
            this.email = data["email"];
            this.applicationRole = data["applicationRole"];
            this.teamId = data["teamId"];
            this.teamName = data["teamName"];
            this.teamRole = data["teamRole"];
            this.federationId = data["federationId"];
            this.federationRole = data["federationRole"];
            this.profileVisibility = data["profileVisibility"];
            this.avatar = data["avatar"];
            this.description = data["description"];
            this.name = data["name"];
            this.id = data["id"];
            this.createdOnUtc = data["createdOnUtc"] ? new Date(data["createdOnUtc"].toString()) : <any>undefined;
            this.modifiedOnUtc = data["modifiedOnUtc"] ? new Date(data["modifiedOnUtc"].toString()) : <any>undefined;
            this.version = data["version"];
        }
    }

    static fromJS(data: any): UserAuthorizationResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserAuthorizationResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["sppdName"] = this.sppdName;
        data["email"] = this.email;
        data["applicationRole"] = this.applicationRole;
        data["teamId"] = this.teamId;
        data["teamName"] = this.teamName;
        data["teamRole"] = this.teamRole;
        data["federationId"] = this.federationId;
        data["federationRole"] = this.federationRole;
        data["profileVisibility"] = this.profileVisibility;
        data["avatar"] = this.avatar;
        data["description"] = this.description;
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdOnUtc"] = this.createdOnUtc ? this.createdOnUtc.toISOString() : <any>undefined;
        data["modifiedOnUtc"] = this.modifiedOnUtc ? this.modifiedOnUtc.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data; 
    }
}

export interface IUserAuthorizationResponseDto {
    /** The token which will have to be set as bearer in the HTTP authorization header for subsequent calls requiring
authentication */
    token: string;
    /** The South Park Phone Destroyer in-game user name */
    sppdName: string;
    /** The email address */
    email: string;
    /** The application role the current user has */
    applicationRole: string;
    /** The team identifier */
    teamId?: string | undefined;
    /** The name of the team. */
    teamName?: string | undefined;
    /** The team role */
    teamRole?: string | undefined;
    /** The federation identifier */
    federationId?: string | undefined;
    /** The federation role */
    federationRole?: string | undefined;
    /** The profile visibility determining who will be able to see the user profile */
    profileVisibility: UserAuthorizationResponseDtoProfileVisibility;
    /** The avatar */
    avatar?: string | undefined;
    /** The description */
    description?: string | undefined;
    /** The entity name */
    name: string;
    /** The entity identifier */
    id: string;
    /** The UTC time, when the entity has been created */
    createdOnUtc: Date;
    /** The UTC time, when the entity has been last updated */
    modifiedOnUtc: Date;
    /** The entity version. */
    version: string;
}

export class UserCardsResponseDto implements IUserCardsResponseDto {
    /** The user identifier */
    userId!: string;
    cards?: UserCardResponseDto[] | undefined;

    constructor(data?: IUserCardsResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            if (Array.isArray(data["cards"])) {
                this.cards = [] as any;
                for (let item of data["cards"])
                    this.cards!.push(UserCardResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserCardsResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserCardsResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        if (Array.isArray(this.cards)) {
            data["cards"] = [];
            for (let item of this.cards)
                data["cards"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserCardsResponseDto {
    /** The user identifier */
    userId: string;
    cards?: UserCardResponseDto[] | undefined;
}

export class UserCardResponseDto implements IUserCardResponseDto {
    /** The level (NULL if not set) */
    level?: number | undefined;
    /** When the level has been last modified. */
    levelLastModified?: Date | undefined;
    /** The card identifier */
    cardId!: string;
    /** The name of the card */
    cardName!: string;
    /** The theme identifier */
    themeId!: string;
    /** The rarity identifier. */
    rarityId!: string;
    /** The type identifier. */
    typeId!: string;
    /** The character type identifier. */
    characterTypeId!: string;

    constructor(data?: IUserCardResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.level = data["level"];
            this.levelLastModified = data["levelLastModified"] ? new Date(data["levelLastModified"].toString()) : <any>undefined;
            this.cardId = data["cardId"];
            this.cardName = data["cardName"];
            this.themeId = data["themeId"];
            this.rarityId = data["rarityId"];
            this.typeId = data["typeId"];
            this.characterTypeId = data["characterTypeId"];
        }
    }

    static fromJS(data: any): UserCardResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserCardResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["levelLastModified"] = this.levelLastModified ? this.levelLastModified.toISOString() : <any>undefined;
        data["cardId"] = this.cardId;
        data["cardName"] = this.cardName;
        data["themeId"] = this.themeId;
        data["rarityId"] = this.rarityId;
        data["typeId"] = this.typeId;
        data["characterTypeId"] = this.characterTypeId;
        return data; 
    }
}

export interface IUserCardResponseDto {
    /** The level (NULL if not set) */
    level?: number | undefined;
    /** When the level has been last modified. */
    levelLastModified?: Date | undefined;
    /** The card identifier */
    cardId: string;
    /** The name of the card */
    cardName: string;
    /** The theme identifier */
    themeId: string;
    /** The rarity identifier. */
    rarityId: string;
    /** The type identifier. */
    typeId: string;
    /** The character type identifier. */
    characterTypeId: string;
}

export enum UserResponseDtoProfileVisibility {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum UserUpdateRequestDtoProfileVisibility {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum UserAuthorizationResponseDtoProfileVisibility {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}